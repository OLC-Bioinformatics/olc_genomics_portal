version: '2'

services:
  web: &web
    restart: always
    build: 
      context: .
      dockerfile: Dockerfile.prod
    expose:
      - "8000"
    links:
      - postgres:postgres
      - redis:redis
    env_file: env
    volumes:
      - ./:/data/web
      - ./sequences:/sequences
      # - /var/run/docker.sock:/var/run/docker.sock # send docker commands from the django docker container
    environment:
      - POSTGRES_USER=myproject_web
      - USE_DOCKER=yes
      - DOCKER_SOCKET=/var/run/docker.sock
      - DOCKER_GROUP=dockerhost
      - DOCKER_HOST=unix:///var/run/docker.sock
    ports:
      - "8000:8000"
    command: /bin/bash -c "gunicorn config.wsgi:application -w 4 -b :8000 -t 3600"

  nginx:
    restart: always
    build: ./nginx/
    ports:
      - "80:80"
    volumes_from:
      - web
    links:
      - web:web

  postgres:
    restart: always
    image: postgres:9.6
    volumes:
      - ./postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./backups/postgresql:/backup
      - ./postgres-data:/var/lib/postgresql/data
    env_file:
      - env
    expose:
      - "5432"

  redis:
    image: redis:3.0

  celeryworker:
    # https://github.com/docker/compose/issues/3220
    <<: *web
    depends_on:
      - redis
      - postgres
    command: ./worker_launcher.sh
      

  celerybeat:
    # https://github.com/docker/compose/issues/3220
    <<: *web
    depends_on:
      - redis
      - postgres
    ports: []
    command: celery -A olc_webportalv2.taskapp beat -l info

  flower:
     <<: *web
     depends_on:
       - celeryworker
       - celerybeat
     command: ["flower", "--basic_auth=$FLOWER_USER:$FLOWER_PASSWORD","--broker=redis://redis:6379/0", "--port=8888"]
     ports:
      - 8888:8888


